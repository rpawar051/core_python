		================================================
			Functions in list (Collection data type--List)
		================================================
=>So far on the object of list, we performed various operations on list like indexing and slicing and along with them we can perform other operations by using the functions of list.

=====================
Functions in list:
=====================
a) append():
   ----------------
   =>This function is used for adding an element to the list at the end(appending)

   =>Syntax:-       listobj.append(element)
=>   Example:
---------------------
	>>> l1=[10,"KVR","OUCET"]
	>>> print(l1, type(l1))---------	[10, 'KVR', 'OUCET'] <class 'list'>
	>>> print(id(l1))-------	2705169545088
	>>> l1.append(94.25)
	>>> print(l1)------	[10, 'KVR', 'OUCET', 94.25]
	>>> l1.append("HYD")
	>>> print(l1)------	[10, 'KVR', 'OUCET', 94.25, 'HYD']
	>>> print(id(l1))------	2705169545088
--------------------------------------------------------------------------------------------------------
b) insert():
------------------
=>This function is used for inserting an element at the specified valid existing  Index
=>Syntax:-     listobj.insert( Index, Element )
-------------------
=>Example:
--------------------
>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> print(l1)---------[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> l1.insert(3,"Python")
>>> print(l1)-------[10, 'KVR', 'OUCET', 'Python', 94.25, 'HYD']
>>> l1.insert(4,2+4j)
>>> print(l1)------[10, 'KVR', 'OUCET', 'Python', (2+4j), 94.25, 'HYD']
---------------------------------------------------------------------------------------------------
c) clear():
---------------
=>This function is used for removing all the elements of list (becomes empty)
=>Syntax:-     varname=listobj.clear()
Examples:-
---------------------
>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> print(l1)--------[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> print(len(l1))------5
>>> l1.clear()
>>> print(l1)------[]
>>> print(len(l1))----0
----------------------------------------------------------------------------------------------------------------------
d) remove():
--------------------
=>This function is used for removing the specified element from listobject
=>If the specified element is not present then we get  ValueError
=>Syntax:-   listobj.remove(element)

Example:

>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD',10]
>>> print(l1)-----------[10, 'KVR', 'OUCET', 94.25, 'HYD', 10]
>>> l1.remove(10)
>>> print(l1)----------['KVR', 'OUCET', 94.25, 'HYD', 10]
>>> l1.remove(10)
>>> print(l1)----------['KVR', 'OUCET', 94.25, 'HYD']
>>> l1.remove("KVR")
>>> print(l1)---------------['OUCET', 94.25, 'HYD']
>>> l1.remove(10)--------ValueError: list.remove(x): x not in list
---------------------------------------------------------------------------------------------------------
e) pop(index) 
--------------------------------------
=>This function is used for removing the element by passing valid existing Index  and the removed element will returned otherwise we get IndexError 

=>Syntax:-    listobj.pop(index)

Examples:
------------------
>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD',10]
>>> print(l1)------------[10, 'KVR', 'OUCET', 94.25, 'HYD', 10]
>>> l1.pop(5)--------10
>>> print(l1)----------[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> l1.pop(10)------------IndexError: pop index out of range
---------------------------------------------------------------------------------------------------------------
f) pop():
--------------
=>This function is used for removing the last element from list object and returned.
=>If call on empty list obj then we get IndexError

=>Syntax:  listobj.pop()
        
Examples:
-----------------
>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD',10]
>>> l1.pop()-----------10
>>> print(l1)-------------[10, 'KVR', 'OUCET', 94.25, 'HYD']
>>> l1.pop()-------------'HYD'
>>> print(l1)-----------[10, 'KVR', 'OUCET', 94.25]
>>> l1.pop()-----------94.25
>>> print(l1)---------[10, 'KVR', 'OUCET']
>>> l1.pop()----------'OUCET'
>>> print(l1)--------[10, 'KVR']
>>> l1.pop()-----------'KVR'
>>> print(l1)--------[10]
>>> l1.pop()--------10
>>> print(l1)-------[]
>>> l1.pop()----------IndexError: pop from empty list
-----------------------------------------------------------------------------------------------------------
g) extend():
--------------------
=>This function is used for extending the source list object with destination list object.

=>Note:- we can use + operator for concatenation multiple list objects content.
Syntax:
-----------
		sourcelistobj.extend(destnationlistobj)
Examples:
------------------
>>> l1=[10,"Ramu","JNTU"]
>>> l2=["python","Java"]
>>> l1.extend(l2)
>>> print(l1)--------[10, 'Ramu', 'JNTU', 'python', 'Java']
>>> print(l2)--------['python', 'Java']
>>> l3=["sports","Games"]
>>> l1.extend(l3)
>>> print(l1)--------[10, 'Ramu', 'JNTU', 'python', 'Java', 'sports', 'Games']
>>> l1=[10,"Ramu","JNTU"]
>>> l2=["python","Java"]
>>> l3=["sports","Games"]
>>> l4=l1+l2+l3
>>> print(l4)----[10, 'Ramu', 'JNTU', 'python', 'Java', 'sports', 'Games']
----------------------------------------------------------------------------------------------------
h) index():
-----------------
=>This function is used for finding the index of specified element from list object
=>If the specified element is not present in list object then we get ValueError

Syntax:-    listobj.index(element)
Examples:
---------------
>>> l1=[10, 'KVR', 'OUCET', 94.25, 'HYD',10]
>>> l1.index(10)----------0
>>> l1.index('OUCET')----------2
>>> l1.index("""HYD""")----4
>>> l1.index("""HYD2""")------ValueError: 'HYD2' is not in list
------------------------------------------------------------------------------------------------------------
i) copy():  (shallow copy   and  Deep Copy)
--------------------------------------------------------------------------------
=>This function function is used for copying the content of one object into another object (OR) This function implements shallow copy process.

Syntax:-			listobj2=listobj1.copy()			

-------------------------
Shallow Copy():
-------------------------
		=>In This Copy Process, Initially content of both the objects are same
		=>The Address of Both the objects are different
		=>The modifications are not reflected (or) the modifications are Independent.

		Syntax:-    obj2=obj1.copy()
Examples:
----------------
>>> l1=[10,'KVR','HYD']
>>> l2=l1.copy()   # shallow copy
>>> print(l1,id(l1))------[10, 'KVR', 'HYD'] 2148771134272
>>> print(l2,id(l2))---------[10, 'KVR', 'HYD'] 2148771134720
>>> l1.append('C')
>>> print(l1,id(l1))--------[10, 'KVR', 'HYD', 'C'] 2148771134272
>>> print(l2,id(l2))------[10, 'KVR', 'HYD'] 2148771134720
>>> l2.append("PYTHON")
>>> print(l1,id(l1))----[10, 'KVR', 'HYD', 'C'] 2148771134272
>>> print(l2,id(l2))-----------[10, 'KVR', 'HYD', 'PYTHON'] 2148771134720

-------------------------
Deep Copy():
-------------------------
	=>In This Copy Process, Initially content of both the objects are same
	=>The Address of Both the objects are same
	=>The modifications are  reflected (or) the modifications are dependent.
=>We can perform deep copy process by using assign operator ( = )

Syntax:-                obj2=obj1

Examples:
------------------
>>> l1=[10,'KVR','HYD']
>>> l2=l1   # deep copy
>>> print(l1,id(l1))------[10, 'KVR', 'HYD'] 2148774671552
>>> print(l2,id(l2))-------[10, 'KVR', 'HYD'] 2148774671552
>>> l1.append('C')
>>> print(l1,id(l1))-------[10, 'KVR', 'HYD', 'C'] 2148774671552
>>> print(l2,id(l2))-------[10, 'KVR', 'HYD', 'C'] 2148774671552
>>> l2.append("PYTHON")
>>> print(l1,id(l1))-----[10, 'KVR', 'HYD', 'C', 'PYTHON'] 2148774671552
>>> print(l2,id(l2))------[10, 'KVR', 'HYD', 'C', 'PYTHON'] 2148774671552
-----------------------------------------------------------------------------------------------------------------------
j) reverse():
--------------------
=>This function is used for reversing the elements of list(right to left)
=>Syntax:-      listobj.reverse()
--------------------
Examples:
---------------------
>>> l1=[10,'KVR','HYD']
>>> print(l1)----------[10, 'KVR', 'HYD']
>>> l1.reverse()
>>> print(l1)-------['HYD', 'KVR', 10]
>>> l1.reverse()
>>> print(l1)--------[10, 'KVR', 'HYD']
>>> l1.reverse()
>>> print(l1)---------['HYD', 'KVR', 10]
--------------------------------------------------------------------------------------------
k) sort():
--------------
=>This function is used for sorting the homogeneous elements (by default in ascending order)

=>Syntax:-       listobj.sort()
				(or)
			listobj.sort(reverse=bool)	

Examples:
-----------------
>>> l1=[10,23,45,-56,0,123,45,1]
>>> print(l1,id(l1))-------[10, 23, 45, -56, 0, 123, 45, 1] 2148771134272
>>> l1.sort()
>>> print(l1,id(l1))----[-56, 0, 1, 10, 23, 45, 45, 123] 2148771134272---ASC Order
>>> l1.reverse()
>>> print(l1,id(l1))-----[123, 45, 45, 23, 10, 1, 0, -56] 2148771134272--DESc Order			 
------------------
Examples:
------------------
>>> l1=[10,23,45,-56,0,123,45,1]
>>> print(l1,id(l1))---------[10, 23, 45, -56, 0, 123, 45, 1] 2148771134720
>>> l1.sort(reverse=True) #sorting in DESC order
>>> print(l1,id(l1))---------[123, 45, 45, 23, 10, 1, 0, -56] 2148771134720
>>> l1=[10,23,45,-56,0,123,45,1]
>>> print(l1,id(l1))----------[10, 23, 45, -56, 0, 123, 45, 1] 2148771134272
>>> l1.sort(reverse=False) #sorting in ASC order
>>> print(l1,id(l1))----[-56, 0, 1, 10, 23, 45, 45, 123] 2148771134272

Examples:
-------------------
>>> l2=["java","python","apple","go","kotlin","cpp"]
>>> print(l2,id(l2))------['java', 'python', 'apple', 'go', 'kotlin', 'cpp'] 2148771134720
>>> l2.sort()
>>> print(l2,id(l2))-----['apple', 'cpp', 'go', 'java', 'kotlin', 'python'] 2148771134720
>>> l2=["java","python","apple","go","kotlin","cpp"]
>>> print(l2,id(l2))-------['java', 'python', 'apple', 'go', 'kotlin', 'cpp'] 2148774671552
>>> l2.sort(reverse=True)
>>> print(l2,id(l2))-----['python', 'kotlin', 'java', 'go', 'cpp', 'apple'] 2148774671552
---------------------------------------------------------------------------------------------------------------------
l) count():
---------------
=>This function is used for finding number of occurences of a specified element in a list.

Syntax:-          listobj.count(element)
---------------------
Examples:
---------------------
>>> l1=[10,20,10,20,25,10,25,20,35,10]
>>> print(l1)-------------[10, 20, 10, 20, 25, 10, 25, 20, 35, 10]
>>> l1.count(10)---------4
>>> l1.count(25)----------2
>>> l1.count(20)--------3
>>> l1.count(35)----------1
>>> l1.count(350)---------0
================================================================

