		=================================================
						complex
		=================================================
=>'complex' is one of the pre-defined class <class, 'complex'> and it is treated as data type.
=>The purpose of complex data type is that to store Complex Data.
=>The general Format of Complex Numbers , followed in Python is 
				
		    a + bj (or) a - bj  (or) -a - bj (or) -a + bj

	Here  'a' is called Real Part
	Here  'b' is called Imaginary Part
	here   'j' is called  Sqrt(-1)
=>Internally, Real Part and  Imaginary Part are treated as <class,'float'>
=>To extract the Real part and Imaginary part from complex number, we use two pre-defined attributes present in Complex class. They are
				a) real
				b) imag
				
Syntax:- complexobj.real---->Gives Real Part of complex number
	      complexobj.imag---->Gives Imaginary Part of complex number

Examples:
------------------
>>> a=2+3j
>>> print(a)------------------(2+3j)
>>> type(a)-----------<class 'complex'>
>>> b=2-3j
>>> print(b)----------(2-3j)
>>> type(b)-----<class 'complex'>
>>> c=-2-3j
>>> print(c, type(c))--------(-2-3j) <class 'complex'>
>>> c=-2+3j
>>> print(c, type(c))--------(-2+3j) <class 'complex'>
>>> c=2.5+3.6j
>>> print(c, type(c))-----------(2.5+3.6j) <class 'complex'>
>>> c=2.5-3.6j
>>> print(c, type(c))-------(2.5-3.6j) <class 'complex'>
>>> c=-2.5-3.6j
>>> print(c, type(c))----------(-2.5-3.6j) <class 'complex'>
>>> c=2.5-3j
>>> print(c, type(c))-------(2.5-3j) <class 'complex'>
>>> c=-2+3.6j
>>> print(c, type(c))-------(-2+3.6j) <class 'complex'>
>>> a=10+20j
>>> print(a)-------------(10+20j)
>>> type(a)---------<class 'complex'>
>>> print(a.real)---------10.0
>>> print(a.imag)-------20.0
>>> b=-2.3-4.5j
>>> print(b)----------------(-2.3-4.5j)
>>> type(b)---------------<class 'complex'>
>>> print(b.real)-------------2.3
>>> print(b.imag)------------4.5








