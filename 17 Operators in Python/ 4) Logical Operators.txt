	==============================================
				4) Logical Operators
		==============================================
=>The purpose of Logical Operators is that "To combine two or more Relational                        Expressions" 
=>If two two or more Relational Expressions are connected with Logical Operators then it        is called Logical Expression (or) Compound Expression.
=>The Result of Logical Expression also gives either True  (or) False.

Syntax:-
--------------
			  RelExpr1   Logical Operator    RelExpr2

=>The following tables gives list of logical operators.
--------------------------------------------------------------------------------------------------------------------------------
	Slno		Symbol			Meaning
--------------------------------------------------------------------------------------------------------------------------------
	1.		  and			Physical ANDing

	2.		   or				Physical ORing

	3.		  not				Obtains the reverse result og Physical AND and OR
--------------------------------------------------------------------------------------------------------------------------------
1) and:
--------------
=>The working process of 'and' operator is shown in the form truth table.
=>Truth Table of 'and'
-------------------------------------------------------------------------------
RelExpr1      RelExpr2      RelExpr1 and  RelExpr2
-------------------------------------------------------------------------------
   False		False			False
   True		False			False
   False		True				False
   True		True				True
-------------------------------------------------------------------------------
Examples:-      >>>a,b,c=10,20,10
			>>>print( (a>b) and (a==c)  )----->False (Short Circuit Evaluation)

			>>>print( (a==c) and (a<b) )------>True
			>>>print( (a!=a) and (a<b) and (a==c))---->False(Short Circuit Evaluation)

------------------------------------------------------------------
Short Circuit Evaluation of 'and' operator:
------------------------------------------------------------------
=>If the result of First relational Expression is False then 'and' operator will not evaluate other relational expression and considers the final result as False and this type of process is called " Short Circuit Evaluation "
------------------------------------------------------------------------------------------------------------------------------
2) or:
--------------
=>The working process of 'or' operator is shown in the form truth table.
=>Truth Table of 'or'
-------------------------------------------------------------------------------
RelExpr1      RelExpr2      RelExpr1 or  RelExpr2 
-------------------------------------------------------------------------------
   False		False		  False	
   True		False		  True	
   False		True			  True		
   True		True			  True	
-------------------------------------------------------------------------------
Examples:-      >>>a,b,c=10,20,10
			>>>print( (a<b) or (a!=c)  )----->True (Short Circuit Evaluation)
					
			>>>print( (a!=c) or (a>b) )------>False

			>>>print( (a==a) or (a<b) or (a==c))---->True(Short Circuit Evaluation)

------------------------------------------------------------------
Short Circuit Evaluation of 'or' operator:
------------------------------------------------------------------
=>If the result of First relational Expression isTrue then 'or' operator will not evaluate other relational expression and considers the final result as True and this type of process is called " Short Circuit Evaluation "
-----------------------------------------------------------------------------------------------------------------------------
3) not:
------------
=>The working process of 'not' operator is shown in the form truth table.
=>Truth Table of 'not'
------------------------------------------------------
Rel Expr		not relexpr1
------------------------------------------------------
True			    False	

False		    True	
------------------------------------------------------
 Examples:-      >>>a,b,c=10,20,10
			>>>print( not ( (a<b) or (a!=c) )  )----->False 
					
			>>>print( not ( (a!=c) or (a>b)) )------>True

			>>>print( not ((a==a) or (a<b) or (a==c))) ---->False
===================================================================