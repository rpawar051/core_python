	================================================
					Bitwise Operators
		================================================
=>In python Programming, Bitwise Operators are used to perform Bitwise calculations only on integer data but not float data.
=>When we use Binary Operators on Integer Data, First Integer Data converted into Binary Form and the operation can be performed on the binary data in the form of bit by bit and hence these operators are called Bitwise Operators. 
=>In Python Programming, we have 6 bitwise Operators. They are
			
			1. Bitwise Left Shift Operator ( << )
			2. Bitwise Right Shift Operator ( >> )
			3. Bitwise AND Operator ( & )
			4. Bitwise OR Operator ( | )
			5. Bitwise Complement (or) not  Operator ( ~ )
			6. Bitwise XOR Operator ( ^ )
=======================================================================
1. Bitwise Left Shift Operator ( << ):
--------------------------------------------------------
Syntax:-
------------
		varname=   GivenNum << no. of bits
Concept:
---------------
=>This Operator shifts "no. of bits" towards leftside by adding number of zeros (equal to the no. of bits)  at the right side .

Examples:
-----------------
>>> a=10
>>> b=3
>>> c=a<<b
>>> print(c)-------80
>>> print(4<<2)-----16
----------------------------------------------------------------------------------------------------------------
2. Bitwise Right Shift Operator ( >> )
---------------------------------------------------------------------------------------------------------------
Syntax:-
------------
		varname=   GivenNum >> no. of bits
Concept:
---------------
=>This Operator shifts "no. of bits" towardsRight side by adding number of zeros (equal to the no. of bits)  at the Left  side .

Examples:
-------------------
>>> a=10
>>> b=3
>>> c=a>>b
>>> print(c)----------1
>>> a=32
>>> print(a>>3)---------4
>>> print(15>>3)---------1
=====================================================================
3. Bitwise AND Operator ( & ):
---------------------------------------------
=>The functionaly of Bitwise AND Operator ( & ) is shown bellow in the following Table.
-------------------------------------------------------------------
Var1           Var2              Var1 & Var2
-------------------------------------------------------------------
 0		    0			    0	
 1                 0			    0
 0                 1			    0
 1                 1			    1
-------------------------------------------------------------------
Example:-
---------------       >>>a=4--------------->     0 1  0  0
			>>>b=3-------------->      0 0  1  1
			-----------------------------------------------
			>>>c=a&b---------->      0 0  0  0  gives Result as 0
		---------------------------------------------------------------------------------
Example:
---------------
>>> a=15----------------------->  1111
>>> b=14----------------------->  1110
>>> c=a&b--------------------->  1110------ Gives 14
>>> print(c)-----------14
--------------------------------------------------------------------------------------------------------
Special Examples:                s1={10,20,30}
---------------------------                s2={40,50,10}

					      s3=s1&s2
						print(s3)-----{10}
----------------------------------------------------------------------------------------------------------
4. Bitwise OR Operator ( | ):
---------------------------------------------
=>The functionaly of Bitwise OR Operator ( | ) is shown bellow in the following Table.
-------------------------------------------------------------------
Var1           Var2              Var1 | Var2
-------------------------------------------------------------------
 0		    0			     0
 1                 0			     1
 0                 1			     1
 1                 1			     1
-------------------------------------------------------------------				

Example:-
---------------       >>>a=4--------------->     0 1  0  0
			>>>b=3-------------->      0 0  1  1
			-----------------------------------------------
			>>>c=a|b------------>     0  1  1  1   Gives 7 as Result
Example:
---------------
>>> a=15----------------------->  1111
>>> b=14----------------------->  1110
>>> c=a|b--------------------->    1111 gives 15 as result
>>> print(c)-----------15

Special Examples:                s1={10,20,30}
---------------------------                s2={40,50,10}

					      s3=s1|s2---{10,20,30,40,50}
===================================================================	
5. Bitwise Complement (or) not  Operator ( ~ ):
------------------------------------------------------------------------
=>This operator returns one's complement of the given number.

Syntax:-             varname=  ~ Value

Example:-           a=10---------------->   1 0 1 0 (binary form)
		       
		       ~a = - ( 1 0 1 0 + 1)--------->   -  1  0  1  0
								       0  0  0  1
								   ------------------- 
								    -  1  0  1  1--- Gives Result as  -11
			    = - (1011)
			    = -11

Example:      a=15-------------------1111 (binary form)

		     ~a= - (1111+1)------------>  -  1 1 1 1
								0 0 0 1
								1 	
							   ---------------------
							  -   1 0  0   0   0------> Result as -16
							--------------------------
Formula:-     ~number= - (number+1)							
Example:-    ~15 =  -(15+1) = -16
		    ~ 23 =  - (23+1)= -24
		    ~ -102= -( -102+1) 
		              = - (-101)
			      = 101
		    print(~-1000)----------------   999
=================================================================
6. Bitwise XOR Operator ( ^ ):
==============================
=>The functionaly of Bitwise XOR Operator (^ ) is shown bellow in the following Table.
(HINT: Similart bits are 0  and non-similar bits are 1
-------------------------------------------------------------------
Var1           Var2              Var1 ^ Var2
-------------------------------------------------------------------
 0		    0				0	     
 1                 0			        1
 0                 1			        1
 1                 1			        0
-------------------------------------------------------------------	
Syntax:-    varname3=varname1 ^ varname2

Examples:-           >>>a=4-----------------0 1 0 0
			     >>>b=3---------------->0 0 1 1
			    -------------------------------------------
			    >>>c=a^b------------->0 1 1 1 -----Result as 7

Example:-         a=15------------------ 1 1 1 1
                          b=14-----------------  1 1 1 0
		------------------------------------------------------------
		        c=a^b------------------ 0 0 0 1 ----- Result as 1
		-------------------------------------------------------------			

Special Case(Symmetric difference):-
-----------------------------------------------------------
			s1={10,20,30}
			s2={40,20,50}            #s3=s1.symmetric_difference(s2)---> s3={10,30,40,50}
			s3=s1^s2 
			print(s3)--------{10,30,40,50}

Special Case:(Swapping Logic)
-----------------------------------------------
				>>>a=4
				>>>b=3
				>>>print(a,b)--------  4    3
				>>>a=a^b
				>>>b=a^b
				>>>a=a^b
				>>>print(a,b)--------  3    4
=====================================================================	









